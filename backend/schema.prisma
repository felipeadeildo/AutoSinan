datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider                    = "prisma-client-py"
  partial_type_generator      = "database/partials.py"
  recursive_type_depth        = 7
  enable_experimental_decimal = true
}

model Permission {
  id    String @id @default(uuid()) @db.Uuid
  name  String @unique
  roles Role[]
}

model Role {
  id          String       @id @default(uuid()) @db.Uuid
  name        String       @unique
  permissions Permission[]
  users       User[]
}

model User {
  id         String      @id @default(uuid()) @db.Uuid
  name       String
  username   String      @unique
  password   String
  roleId     String      @db.Uuid
  role       Role        @relation(fields: [roleId], references: [id])
  executions Exec[]
  subs       Sub[]
  configs    BotConfig[]
}

model Plan {
  id          String    @id @default(uuid()) @db.Uuid
  name        String    @unique
  description String
  price       Decimal   @db.Decimal(10, 2)
  subs        Sub[]
  benefits    Benefit[]
}

model Sub {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @db.Uuid
  user      User      @relation(fields: [userId], references: [id])
  planId    String    @db.Uuid
  plan      Plan      @relation(fields: [planId], references: [id])
  startDate DateTime  @default(now())
  endDate   DateTime?
  paid      Decimal   @db.Decimal(10, 2)
  status    SubStatus
}

model Benefit {
  id     String  @id @default(uuid()) @db.Uuid
  planId String  @db.Uuid
  plan   Plan    @relation(fields: [planId], references: [id])
  botId  String  @db.Uuid
  bot    Bot     @relation(fields: [botId], references: [id])
  limits Limit[]
}

model Limit {
  id        String  @id @default(uuid()) @db.Uuid
  benefitId String  @db.Uuid
  benefit   Benefit @relation(fields: [benefitId], references: [id])
  taskType  String
  maxConcur Int
}

model Bot {
  id         String             @id @default(uuid()) @db.Uuid
  name       String             @unique
  desc       String
  version    String
  status     BotStatus
  slug       String             @unique
  updatedAt  DateTime           @updatedAt
  execs      Exec[]
  interrupts Interrupt[]
  tasks      Task[]
  benefits   Benefit[]
  configs    BotConfig[]
  defaults   DefaultBotConfig[]
}

model Task {
  id       String @id @default(uuid()) @db.Uuid
  botId    String @db.Uuid
  bot      Bot    @relation(fields: [botId], references: [id])
  name     String
  desc     String
  taskType String
}

model Exec {
  id        String     @id @default(uuid()) @db.Uuid
  botId     String     @db.Uuid
  bot       Bot        @relation(fields: [botId], references: [id])
  userId    String     @db.Uuid
  user      User       @relation(fields: [userId], references: [id])
  startTime DateTime   @default(now())
  endTime   DateTime?
  status    ExecStatus
  metadata  Json
  filePath  String?
  logs      Log[]
  taskExecs TaskExec[]
  files     ExecFile[]
}

model TaskExec {
  id           String     @id @default(uuid()) @db.Uuid
  execId       String     @db.Uuid
  exec         Exec       @relation(fields: [execId], references: [id])
  parentTaskId String?    @db.Uuid
  parentTask   TaskExec?  @relation("ParentTask", fields: [parentTaskId], references: [id])
  childTasks   TaskExec[] @relation("ParentTask")
  taskType     String
  startTime    DateTime   @default(now())
  endTime      DateTime?
  status       ExecStatus
  metadata     Json
}

model ExecFile {
  id       String @id @default(uuid()) @db.Uuid
  execId   String @db.Uuid
  exec     Exec   @relation(fields: [execId], references: [id])
  filePath String
  fileName String
  fileMeta Json
}

model Log {
  id        String   @id @default(uuid()) @db.Uuid
  execId    String   @db.Uuid
  exec      Exec     @relation(fields: [execId], references: [id])
  timestamp DateTime @default(now())
  message   String
  level     LogLevel
}

model Interrupt {
  id        String    @id @default(uuid()) @db.Uuid
  botId     String    @db.Uuid
  bot       Bot       @relation(fields: [botId], references: [id])
  startTime DateTime  @default(now())
  endTime   DateTime?
  reason    String
  desc      String?
}

model DefaultBotConfig {
  id      String            @id @default(uuid()) @db.Uuid
  botId   String            @db.Uuid
  bot     Bot               @relation(fields: [botId], references: [id])
  key     String
  name    String
  desc    String
  type    ConfigType
  options BotConfigOption[]
}

model BotConfigOption {
  id       String           @id @default(uuid()) @db.Uuid
  configId String           @db.Uuid
  config   DefaultBotConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  key      String
  value    String
}

model BotConfig {
  id     String @id @default(uuid()) @db.Uuid
  botId  String @db.Uuid
  bot    Bot    @relation(fields: [botId], references: [id])
  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id])
  key    String
  value  String
}

enum ConfigType {
  INT
  FLOAT
  STRING
  BOOLEAN
}

enum SubStatus {
  ACTIVE
  CANCELLED
  EXPIRED
}

enum BotStatus {
  ACTIVE
  PAUSED
  DEPRECATED
}

enum ExecStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}

enum LogLevel {
  INFO
  WARNING
  ERROR
  DEBUG
}
